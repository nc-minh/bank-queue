
import json
import os
import sqlite3
from flask import Flask, render_template
import threading
import requests
import time

app = Flask(__name__, static_folder='static')

queue_server_url = 'http://localhost:5555'

def get_db_connection():
    conn = None
    try:
        db_path = os.path.abspath(os.getcwd() + "/db/database.db")
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
    except sqlite3.Error as e:
        print(f"Error connecting to database: {e}")
    return conn

def dequeue_message():
    retries = 0

    while True:
        try:
            response = requests.get(f'{queue_server_url}/dequeue?key=order-service', timeout=1200000)
            response.raise_for_status()  # Raise an HTTPError for bad responses (4xx and 5xx)
            return response.json()
        except requests.exceptions.Timeout:
            print("Timeout error. Retrying..." + str(retries))
        except requests.exceptions.RequestException:
            print("Error RequestException. Retrying..." + str(retries))
        except Exception:
            print("Error Exception. Retrying..." + str(retries))

        retries += 1
        # Use exponential backoff with a maximum delay of 32 seconds
        time.sleep(2)  # Add a delay before retrying

def consumer():
    while True:
        try:
            message = dequeue_message()
            if message:
                print(f'Received message: {message}')

                message_object = message.get('message')

                order_info = json.dumps(message_object)
                order_status = 'PENDING'

                conn = get_db_connection()
                conn.execute('INSERT INTO orders (order_info, status) VALUES (?, ?)',
                            (order_info, order_status))
                conn.commit()
                conn.close()

        except requests.exceptions.RequestException as e:
            print(f"Error: {e}. Retrying...")

@app.route('/')
def index():
    conn = get_db_connection()
    rows = conn.execute('SELECT * FROM orders WHERE status = ?', ('PENDING',)).fetchall()
    conn.close()

    orders = [dict(row) for row in rows]

    for order in orders:
        order['order_info'] = json.loads(order['order_info'])

    return render_template('index.html', orders=orders)

if __name__ == '__main__':
    # Create a background thread for the consumer
    consumer_thread = threading.Thread(target=consumer, daemon=True)
    consumer_thread.start()

    # Run the Flask app
    app.run(host='localhost', port=5001, debug=True, threaded=True)
